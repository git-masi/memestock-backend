service: memestock

frameworkVersion: '2'

plugins:
  - serverless-bundle
  # - serverless-pseudo-parameters # Not necessary with Serverless >2.3.x
  - serverless-offline
  - serverless-cloudside-plugin

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  memorySize: 256
  # stage: ${opt:stage, dev}
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: '20201221'
  environment:
    MAIN_TABLE_NAME: !Ref MemeStockMainTable
    COGNITO_GENERIC_USER_POOL_ID: !Ref GenericUserPool
    COGNITO_GENERIC_USER_CLIENT_ID: !Ref GenericUserClient
    ORDER_STATUS_AND_SK_GSI: orderStatusAndSk
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - !GetAtt MemeStockMainTable.Arn
        - !Join ['/', [!GetAtt MemeStockMainTable.Arn, 'index', '*']]
    - Effect: Allow
      Action:
        - 'cognito-idp:AdminConfirmSignUp'
        - 'cognito-idp:AdminCreateUser'
        - 'cognito-idp:AdminGetUser'
        - 'cognito-idp:AdminSetUserPassword'
        - 'cognito-idp:AdminUpdateUserAttributes'
        - 'cognito-idp:DescribeUserPool'
      Resource:
        - !GetAtt GenericUserPool.Arn

custom:
  serverless-offline:
    httpPort: 4321

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    MemeStockMainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # TableName: MemeStockMainTable-${self:provider.stage}
        TableName: MemeStockMainTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: orderStatus
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: orderStatusAndSk
            KeySchema:
              - AttributeName: orderStatus
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    GenericUserAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: generic-user-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [GenericUserPool, Arn]
    GenericUserClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: memestock-generic-user-client
        GenerateSecret: False
        UserPoolId:
          Ref: GenericUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
    GenericUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: memestock-generic-user
        MfaConfiguration: 'OFF'
        # AccountRecoverySetting:
        #   - email
        AliasAttributes:
          - email
          - preferred_username
        # UsernameAttributes:
        #   - email
        #   - 'userId'
        #   - 'username'
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: 'userId'
            Mutable: false
            AttributeDataType: String
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

functions:
  users:
    handler: handlers/users.handler
    events:
      - http:
          method: get
          path: users
      - http:
          method: post
          path: users
      - http:
          method: post
          path: users/signup
      - http:
          method: post
          path: users/login
      - http:
          method: put
          path: users
      - http:
          method: delete
          path: users
  companies:
    handler: handlers/companies.handler
    events:
      - http:
          method: get
          path: companies
      - http:
          method: post
          path: companies
      - http:
          method: put
          path: companies
      - http:
          method: delete
          path: companies
  ai:
    handler: handlers/ai.handler
    events:
      - http:
          method: get
          path: ai
      - http:
          method: post
          path: ai
      - http:
          method: put
          path: ai
      - http:
          method: delete
          path: ai
      - http:
          method: get
          path: ai/action
  executeAiAction:
    handler: handlers/ai.executeAiAction
    # events:
    #   - schedule:
    #       rate: rate(1 minute)
    #       enabled: true
  orders:
    handler: handlers/orders.handler
    events:
      - http:
          method: get
          path: orders
      - http:
          method: get
          path: orders/{id}
      - http:
          method: get
          path: orders/count/{orderStatus}
      - http:
          method: post
          path: orders
      - http:
          method: put
          path: orders
