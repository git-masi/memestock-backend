service: memestock

frameworkVersion: '2'

plugins:
  - serverless-bundle
  # - serverless-pseudo-parameters # Not necessary with Serverless >2.3.x
  - serverless-offline
  - serverless-cloudside-plugin

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  memorySize: 256
  # stage: ${opt:stage, dev}
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: '20201221'
  environment:
    MAIN_TABLE_NAME: !Ref MemeStockMainTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - !GetAtt MemeStockMainTable.Arn
        - !Join ['/', [!GetAtt MemeStockMainTable.Arn, 'index', '*']]

custom:
  serverless-offline:
    httpPort: 4321

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    MemeStockMainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # TableName: MemeStockMainTable-${self:provider.stage}
        TableName: MemeStockMainTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE

functions:
  users:
    handler: handlers/users.handler
    events:
      - http:
          method: get
          path: users
      - http:
          method: post
          path: users
      - http:
          method: put
          path: users
      - http:
          method: delete
          path: users
  companies:
    handler: handlers/companies.handler
    events:
      - http:
          method: get
          path: companies
      - http:
          method: post
          path: companies
      - http:
          method: put
          path: companies
      - http:
          method: delete
          path: companies
  ai:
    handler: handlers/ai.handler
    events:
      - http:
          method: get
          path: ai
      - http:
          method: post
          path: ai
      - http:
          method: put
          path: ai
      - http:
          method: delete
          path: ai
      - http:
          method: get
          path: ai/action
  executeAiAction:
    handler: handlers/ai.executeAiAction
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
  orders:
    handler: handlers/orders.handler
    events:
      - http:
          method: get
          path: orders
      - http:
          method: post
          path: orders
      - http:
          method: put
          path: orders
